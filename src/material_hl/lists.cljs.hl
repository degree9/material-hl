(ns material-hl.lists
  (:require [material-hl.core :as core]))

(def ^:dynamic *lines* nil)

(defelem list [attr kids]
  (let []
    (ul (core/assoc-class attr {:mdl-list true})
      kids)))

(defelem list-item [attr kids]
  (let [ln (or (:lines attr) *lines*)]
    (li (core/assoc-class attr
          {:mdl-list__item true
           (keyword (str "mdl-list__item--" (when ln (name ln)) "-line")) ln})
      kids)))

(defelem item-avatar [attr kids]
  (let []
    (span (core/assoc-class attr {:mdl-list__item-avatar true})
      kids)))

(defelem item-icon [attr kids]
  (let []
    (span (core/assoc-class attr {:mdl-list__item-icon true})
      kids)))

(defelem item-text-body [attr kids]
  (let []
    (span (core/assoc-class attr {:mdl-list__item-text-body true})
      kids)))

(defelem item-primary-content [attr kids]
  (let []
    (span (core/assoc-class attr {:mdl-list__item-primary-content true})
      kids)))

(defelem item-secondary-content [attr kids]
  (let []
    (span (core/assoc-class attr {:mdl-list__item-secondary-content true})
      kids)))

(defelem item-secondary-info [attr kids]
  (let []
    (span (core/assoc-class attr {:mdl-list__item-secondary-info true})
      kids)))

(defelem item-secondary-action [attr kids]
  (let []
    (span (core/assoc-class attr {:mdl-list__item-secondary-action true})
      kids)))
