(ns material-hl.grid
  (:refer-hoplon :exclude [cell])
  (:require [material-hl.core :as core]))

(def ^:dynamic *no-spacing* false)
(def ^:dynamic *cols* nil)
(def ^:dynamic *desktop-cols* nil)
(def ^:dynamic *tablet-cols* nil)
(def ^:dynamic *phone-cols* nil)
(def ^:dynamic *offset* nil)
(def ^:dynamic *desktop-offset* nil)
(def ^:dynamic *tablet-offset* nil)
(def ^:dynamic *phone-offset* nil)
(def ^:dynamic *order* nil)
(def ^:dynamic *desktop-order* nil)
(def ^:dynamic *tablet-order* nil)
(def ^:dynamic *phone-order* nil)
(def ^:dynamic *hide-desktop* false)
(def ^:dynamic *hide-tablet* false)
(def ^:dynamic *hide-phone* false)
(def ^:dynamic *align* nil)
(def ^:dynamic *shadow* nil)

(defelem grid [attr kids]
  (let [spacing (or (:no-spacing attr) *no-spacing*)]
    (div (core/assoc-class attr {:mdl-grid true :mdl-grid--no-spacing spacing})
      kids)))

(defelem cell [attr kids]
  (let [cols           (or (:cols attr)           *cols*)
        desktop-cols   (or (:desktop-cols attr)   *desktop-cols*)
        tablet-cols    (or (:tablet-cols attr)    *tablet-cols*)
        phone-cols     (or (:phone-cols attr)     *phone-cols*)
        offset         (or (:offset attr)         *offset*)
        desktop-offset (or (:desktop-offset attr) *desktop-offset*)
        tablet-offset  (or (:tablet-offset attr)  *tablet-offset*)
        phone-offset   (or (:phone-offset attr)   *phone-offset*)
        order          (or (:order attr)          *order*)
        desktop-order  (or (:desktop-order attr)  *desktop-order*)
        tablet-order   (or (:tablet-order attr)   *tablet-order*)
        phone-order    (or (:phone-order attr)    *phone-order*)
        hide-desktop   (or (:hide-desktop attr)   *hide-desktop*)
        hide-tablet    (or (:hide-tablet attr)    *hide-tablet*)
        hide-phone     (or (:hide-phone attr)     *hide-phone*)
        align          (or (:align attr)          *align*)]
    (div
      (core/assoc-class attr
        {:mdl-cell true
         :mdl-cell--hide-desktop hide-desktop
         :mdl-cell--hide-tablet hide-tablet
         :mdl-cell--hide-phone hide-phone
         (keyword (str "mdl-cell--" cols           "-col")) cols
         (keyword (str "mdl-cell--" desktop-cols   "-col-desktop")) desktop-cols
         (keyword (str "mdl-cell--" tablet-cols    "-col-tablet")) tablet-cols
         (keyword (str "mdl-cell--" phone-cols     "-col-phone")) phone-cols
         (keyword (str "mdl-cell--" offset         "-offset")) offset
         (keyword (str "mdl-cell--" desktop-offset "-offset-desktop")) desktop-offset
         (keyword (str "mdl-cell--" tablet-offset  "-offset-tablet")) tablet-offset
         (keyword (str "mdl-cell--" phone-offset   "-offset-phone")) phone-offset
         (keyword (str "mdl-cell--" order          "-order")) order
         (keyword (str "mdl-cell--" desktop-order  "-order-desktop"))desktop-order
         (keyword (str "mdl-cell--" tablet-order   "-order-tablet")) tablet-order
         (keyword (str "mdl-cell--" phone-order    "-order-phone")) phone-order
         (keyword (str "mdl-cell--" (when align (name align)))) align})
      kids)))

(defelem cell-card [attr kids]
  (let [shadow (or (:shadow attr) *shadow*)]
    (cell (core/assoc-class attr
            {:mdl-card true
             (keyword (str "mdl-shadow--" shadow "dp")) shadow})
      kids)))
